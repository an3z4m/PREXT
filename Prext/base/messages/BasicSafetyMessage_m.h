//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/BasicSafetyMessage.msg.
//

#ifndef __VEINS_BasicSafetyMessage_M_H
#define __VEINS_BasicSafetyMessage_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/DemoSafetyMessage_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


//namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/BasicSafetyMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet BasicSafetyMessage extends BaseFrame1609_4
 * {
 *     string demoData;
 *     LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 * }
 * </pre>
 */
using veins::LAddress;

class VEINS_API  BasicSafetyMessage : public veins::DemoSafetyMessage
{
  protected:
    ::omnetpp::opp_string demoData;
    LAddress::L2Type senderAddress;
    int serial;

  private:
    void copy(const BasicSafetyMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BasicSafetyMessage&);

  public:
    BasicSafetyMessage(const char *name=nullptr, short kind=0);
    BasicSafetyMessage(const BasicSafetyMessage& other);
    virtual ~BasicSafetyMessage();
    BasicSafetyMessage& operator=(const BasicSafetyMessage& other);
    virtual BasicSafetyMessage *dup() const override {return new BasicSafetyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getDemoData() const;
    virtual void setDemoData(const char * demoData);
    virtual LAddress::L2Type& getSenderAddress();
    virtual const LAddress::L2Type& getSenderAddress() const {return const_cast<BasicSafetyMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BasicSafetyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BasicSafetyMessage& obj) {obj.parsimUnpack(b);}

//} // namespace veins

#endif // ifndef __VEINS_BasicSafetyMessage_M_H
